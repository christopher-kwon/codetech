<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Comments">

    <select id="commentCountByStore" resultType="int" parameterType="map">
        select count(*)
        from comments c
        left join (select u.user_id as comment_writer,
        f.user_name as comment_writer_value,
        u.user_email as comment_writer_email
        from users u
        join user_info f on u.user_id = f.user_id) uf
        on c.comment_writer = uf.comment_writer
        left join comment_status t on t.comment_status_id = c.comment_status
        where c.comment_store = #{store_id}
        <if test="search_val != null">
            and (uf.comment_writer_value like #{search_val}
            or uf.comment_writer_email like #{search_val})
        </if>
        and c.comment_lev = 0
        and t.status_value = 'active'
        order by comment_ref desc, comment_seq
    </select>
    <select id="commentListByStore" resultType="comment" parameterType="map">
        select *
        from (select rownum as rnum, a.*
        from (select *
        from comments c
        left join (select u.user_id as comment_writer,
        f.user_name as comment_writer_value,
        u.user_email as comment_writer_email
        from users u
        join user_info f on u.user_id = f.user_id) uf
        on c.comment_writer = uf.comment_writer
        left join comment_status t on t.comment_status_id = c.comment_status
        where c.comment_store = #{store_id}
        <if test="search_val != null">
            and (uf.comment_writer_value like #{search_val}
            or uf.comment_writer_email like #{search_val})
        </if>
        and c.comment_lev = 0
        and t.status_value = 'active'
        order by comment_ref desc, comment_seq) a)
        where rnum between #{startRow} and #{endRow}
    </select>

    <select id="read" parameterType="int" resultType="comment">
        select *
        from comments c
                 left join (select u.user_id   as comment_writer,
                                   f.user_name as comment_writer_value
                            from users u
                                     join user_info f on u.user_id = f.user_id) uf
                           on c.comment_writer = uf.comment_writer
                 left join comment_status t on t.comment_status_id = c.comment_status
        where c.comment_id = #{comment_id}
           or c.comment_ref = #{comment_id}
            and t.status_value = 'active'
        order by c.comment_lev, c.comment_seq
    </select>

    <update id="updateSeq" parameterType="comment">
        update comments
        set comment_seq = comment_seq + 1
        where comment_ref = #{comment_ref}
          and comment_seq > #{comment_seq}
    </update>

    <insert id="create" parameterType="comment">
        <selectKey resultType="int" order="BEFORE"
                   keyProperty="comment_id">
            select nvl(max(comment_id), 0) +1 from comments
        </selectKey>
        insert into comments(comment_id, comment_content, comment_lev,
        comment_ref, comment_seq, comment_writer,comment_store)
        values(#{comment_id},#{comment_content},#{comment_lev},
        #{comment_ref},#{comment_seq},#{comment_writer},#{comment_store})
    </insert>
    
    <select id="selectComment" parameterType="int" resultType= "comment">
    	select comment_content
    	from comments
    	where comment_id = #{comment_id}
    </select>
    
    <select id="readCommentReport" parameterType="int" resultType="report">
		select * from comment_report where cmt_report_id = #{cmt_report_id}   
    </select>

</mapper> 

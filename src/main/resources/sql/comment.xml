<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Comments">

    <select id="commentCountByStore" resultType="int" parameterType="map">
        select nvl(count(*), 0)
        from comments c
        left join (select u.user_id as comment_writer,
        f.user_name as comment_writer_value,
        u.user_email as comment_writer_email
        from users u
        join user_info f on u.user_id = f.user_id) uf
        on c.comment_writer = uf.comment_writer
        left join comment_status t on t.comment_status_id = c.comment_status
        where c.comment_store = #{store_id}
        <if test="search_val != null">
            and (uf.comment_writer_value like #{search_val}
            or uf.comment_writer_email like #{search_val})
        </if>
        and c.comment_lev = 0
        and t.status_value = 'active'
        order by comment_ref desc, comment_seq
    </select>
    <select id="commentListByStore" resultType="comment" parameterType="map">
        select *
        from (select rownum as rnum, a.*
        from (select *
        from comments c
        left join (select u.user_id as comment_writer,
        f.user_name as comment_writer_value,
        u.user_email as comment_writer_email
        from users u
        join user_info f on u.user_id = f.user_id) uf
        on c.comment_writer = uf.comment_writer
        left join comment_status t on t.comment_status_id = c.comment_status
        where c.comment_store = #{store_id}
        <if test="search_val != null">
            and (uf.comment_writer_value like #{search_val}
            or uf.comment_writer_email like #{search_val})
        </if>
        and c.comment_lev = 0
        and t.status_value = 'active'
        order by comment_ref desc, comment_seq) a)
        where rnum between #{startRow} and #{endRow}
    </select>

    <select id="read" parameterType="int" resultType="comment">
        select *
        from comments c
                 left join (select u.user_id   as comment_writer,
                                   f.user_name as comment_writer_value
                            from users u
                                     join user_info f on u.user_id = f.user_id) uf
                           on c.comment_writer = uf.comment_writer
                 left join comment_status t on t.comment_status_id = c.comment_status
        where (c.comment_id = #{comment_id}
            or c.comment_ref = #{comment_id})
          and (t.status_value = 'active'
            or t.status_value = 'inactive')
        order by c.comment_lev, c.comment_seq
    </select>

    <update id="updateSeq" parameterType="comment">
        update comments
        set comment_seq = comment_seq + 1
        where comment_ref = #{comment_ref}
          and comment_seq > #{comment_seq}
    </update>

    <insert id="create" parameterType="comment">
        <selectKey resultType="int" order="BEFORE"
                   keyProperty="comment_id">
            select nvl(max(comment_id), 0) +1 from comments
        </selectKey>
        insert into comments(comment_id, comment_content, comment_lev,
        comment_ref, comment_seq, comment_writer,comment_store)
        values(#{comment_id},#{comment_content},#{comment_lev},
        #{comment_ref},#{comment_seq},#{comment_writer},#{comment_store})
    </insert>


    <select id="selectComment" parameterType="int" resultType="comment">
        select comment_content
        from comments
        where comment_id = #{comment_id}
    </select>

    <select id="readCommentReport" parameterType="int" resultType="report">
        select *
        from comment_report
        where cmt_report_id = #{cmt_report_id}
    </select>


    <update id="update" parameterType="comment">
        update comments
        set updated_at = localtimestamp,
        <if test="comment_content != null">
            comment_content = #{comment_content}
        </if>
        <if test="comment_status != null">
            comment_status = (select comment_status_id from comment_status where status_value = #{comment_status})
        </if>
        where comment_id = #{comment_id}
    </update>

    <select id="getComment" resultType="comment" parameterType="int">
        select *
        from comments
        where comment_writer = ${user_id}
    </select>

    <select id="commentCountByUser" resultType="int" parameterType="int">
        select nvl(count(*), 0)
        from comments
        where comment_writer = #{user_id}
    </select>

	<select id="cmtCountByUserActive" resultType="int" parameterType="int">
		select nvl(count(*), 0)
        from comments
        where comment_writer = #{user_id} and comment_status = 1
	</select>
    <select id="userCommentList" parameterType="int" resultType="comment">
        select *
        from (select rownum rnum, cs.*
              from (select c.*, s.comment_store_value, s.like_id
                    from COMMENTS c
                             left join(
                        select st.store_id as comment_store, st.store_name as comment_store_value, l.like_id
                        from STORES st
                                 left join LIKES l
                                           on st.store_id = l.store_id
                    ) s
                                      on c.comment_store = s.comment_store
                    where comment_writer = #{user_id}
                      and comment_status = 1
                    order by created_at desc) cs
             )
        where rnum between #{start} and #{end}
    </select>

    <select id="commentAllByStore" parameterType="map" resultType="comment">
        select *
        from (select rownum rnum, ci.*
              from (select c.comment_id
                         , c.comment_content
                         , c.comment_lev
                         , c.comment_seq
                         , c.comment_ref
                         , c.created_at
                         , c.comment_writer
                         , c.comment_store
                         , c.comment_status
                         , i.comment_writer_value
                    from (
                             select *
                             from comments
                             where comment_store = #{store_id} and comment_status = 1
                         ) c
                             left join (select user_id as comment_writer, user_name as comment_writer_value
                                        from USER_INFO) i
                                       on c.comment_writer = i.comment_writer
                    order by c.comment_ref desc, c.comment_lev
                   ) ci
             )
        where rnum between #{start} and #{end}
    </select>

    <insert id="addCommentByUser" parameterType="comment">
        <selectKey resultType="int" order="BEFORE"
                   keyProperty="comment_id">
            select nvl(max(comment_id), 0) +1 from comments
        </selectKey>
        insert into comments(comment_id, comment_content, comment_lev,
        comment_ref, comment_seq, comment_writer,comment_store)
        values(#{comment_id},#{comment_content},#{comment_lev},
        #{comment_id},#{comment_seq},#{comment_writer},#{comment_store})

    </insert>
</mapper> 


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Stores">
	<select id="nameCheck" resultType="store" parameterType="String">
		select *
		from stores
		where store_name = #{name}
	</select>
	<insert id="createStore" parameterType="store"
		useGeneratedKeys="true" keyProperty="store_id" keyColumn="store_id">
		<selectKey resultType="int" order="BEFORE"
			keyProperty="store_id">
			select nvl(max(store_id), 0) +1 from stores
		</selectKey>

		insert into stores (store_id, store_name, store_tel, store_address_si,
		store_address_gu,
		store_address_dong, store_address_etc, store_desc, store_rnum,
		store_saved_image, store_original_image, opening_h_w, opening_h_h, holiday, owner_id)
		values
		(#{store_id},#{store_name},#{store_tel},#{store_address_si},#{store_address_gu},
		#{store_address_dong},#{store_address_etc},#{store_desc},#{store_rnum},
		#{store_saved_image},#{store_original_image},#{opening_h_w},#{opening_h_h}
		,#{holiday}, #{owner_id} )
	</insert>
	<select id="count" resultType="int">
		select count(*)
		from stores s
		join store_status t on s.store_status = t.store_status_id
		where s.owner_id = #{owner_id}
		and t.status_value not like '%in%'
	</select>

	<select id="listByOwner" resultType="store" parameterType="int">
		select s.*, u.*, f.*, t.status_value
		from stores s
		join users u on s.owner_id = u.user_id
		join user_info f on s.owner_id = f.user_id
		join store_status t on s.store_status = t.store_status_id
		where s.owner_id = #{owner_id}
		and t.status_value not like '%in%'
	</select>

	<select id="read" resultType="store" parameterType="int">
		select s.*, u.*, f.*, t.status_value
		from stores s
		join users u on s.OWNER_ID = u.USER_ID
		join user_info f on s.OWNER_ID = f.USER_ID
		join store_status t on s.store_status = t.store_status_id
		where s.store_id = #{store_id}
		and t.status_value not like '%in%'
	</select>

	<select id="forMain" resultType="store">
	
	select * from (
	select row_number() over (order by store_like desc) as num, store_name, store_saved_image, store_status, store_like, store_comment 
	from stores 
	) where num &lt;= 4
	
	</select>


	<select id="getListCount" resultType="int">
		select count(store_id)
		from stores
	</select>

	<select id="getListCountforSearchList" resultType="int"
		parameterType="String">
		select count(*) from stores where
		<include refid="forSearch" />
	</select>

	<select id="forMainList" resultType="store" parameterType="Map">
		
		select * from (
	select row_number() over (order by store_like desc) as num, store_name, store_saved_image, store_status, store_like, store_comment 
	from stores 
	) 
		where num &gt;= #{start}
		and num &lt;= #{end}

	</select>


	<select id="forReviewList" resultType="store"
		parameterType="Map">
		select * from (
	select row_number() over (order by store_comment desc) as num, store_name, store_saved_image, store_status, store_like, store_comment 
	from stores 
	) 
		where num &gt;= #{start}
		and num &lt;= #{end}
	</select>

	

	<select id="store_search" resultType="store"
		parameterType="Map">
		select * from (
		select row_number() over (order by store_id) num, store_name, store_id,
		store_saved_image, store_status
		from
		stores
		where
		<include refid="forSearch" />
		) where num &gt;= #{start}
		and num &lt;= #{end}
	</select>


	<sql id="forSearch">
		(store_name || store_address_si || store_address_gu ||
		store_address_dong)
		like
		#{searchWord}
	</sql>
	
		<select id="getMap" resultType="storemap"
		parameterType="String">
		select * from storemap where
				<include refid="forSearch" /> 
				and rownum &lt;= 1
	</select>

</mapper>